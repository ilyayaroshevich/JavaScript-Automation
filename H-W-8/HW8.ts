import * as _ from "lodash";
/*
#### Task 1 üñ•
–í—ã–≤–µ–¥–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`forEach`**
const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`
*/
console.log(`TASK 1:`);
{
    function showArrayElements(array: number[]): void {                         //function declaration
        array.forEach((elements) => console.log(elements))
    };
    showArrayElements([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]);
    console.log(`------------------------`);
    let showArrayElements1 = (array1: number[]): void => array1.forEach((elements1) => console.log(elements1)); //arrow function
    showArrayElements1([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]);
}
/*
#### Task 2 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`map`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ **`users`**, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:
> ['member 1: Darya', 'member 2: Masha', ... etc]
const users = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton']
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`.
*/
console.log(`TASK 2:`);
{
    function createNewUsersArray(userArray: string[]): void {                                   //function declaration
        const newUsersArray = userArray.map((user, index) => `member ${index + 1}: ${user}`);
        console.log(newUsersArray);
    };
    createNewUsersArray(['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton']);
    console.log(`------------------------`);
    let createNewUsersArray1 = (userArray1: string[]): void => {                                //arrow function
        const newUsersArray1 = userArray1.map((user1, index1) => `member ${index1 + 1}: ${user1}`);
        console.log(newUsersArray1);
    };
    createNewUsersArray1(['Ilya', 'Alex', 'Dasha', 'Inga', 'Elena', 'Dima']);
}
/*
#### Task 3 üñ•
–° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`filter`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
    const numbers = [7, -4, 32, -90, 54, 32, -21]
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`.
*/
console.log(`TASK 3:`);
{
    function createPositiveArray(numArray: number[]): void {                //function declaration
        const filteredNumbers = numArray.filter((number) => number > 0);
        console.log(filteredNumbers);
    };
    createPositiveArray([7, -4, 32, -90, 54, 32, -21]);
    console.log(`------------------------`);
    let createPositiveArray1 = (numArray1: number[]): void => {             //arrow function
        const filteredNumbers1 = numArray1.filter((number1) => number1 > 0);
        console.log(filteredNumbers1);
    };
    createPositiveArray1([7, -4, 32, -90, 54, 32, -21]);
}
/*
#### Task 4 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`reduce`** –ø–æ–ª—É—á–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞.
    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`.
*/
console.log(`TASK 4:`);
{
    function getSumOfArrayValue(array: number[]): void {                                    //function declaration
        let newFibonacci = array.reduce((sum, current) => sum + current, 0);
        console.log(newFibonacci);
    };
    getSumOfArrayValue([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]);
    console.log(`------------------------`);
    let showArrayElements1 = (array1: number[]): void => {                                  //arrow function
        let newFibonacci = array1.reduce((sum, current) => sum + current, 0);
        console.log(newFibonacci);
    };
    showArrayElements1([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]);
}
/*
#### Task 5 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`find`** –Ω–∞–π–¥–∏—Ç–µ –≤ –º–∞—Å—Å–∏–≤–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.
    const numbers = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]
*/
console.log(`TASK 5:`);
{
    const numbers = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5];
    const found = numbers.find((element) => element % 2 === 0);
    console.log(found);
}
/*
#### Task 6 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`some`** –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ, –≤ –º–∞—Å—Å–∏–≤–µ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫—Ä–∞—Ç–Ω—ã–π 3 –∏ 5.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`.
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false
*/
console.log(`TASK 6:`);
{
    function findMultiplesElements(myArray: number[]): boolean {                        //function declaration
        const value = myArray.some(element => element % 3 === 0 && element % 5 === 0);
        return value;
    };
    console.log(findMultiplesElements([5, 9, 13, 24, 54, 10, 13, 99, 1, 5, 15])); //TRUE
    console.log(`------------------------`);
    let findMultiplesElements1 = (myArray1: number[]): boolean => {                     //arrow function
        const value1 = myArray1.some(element1 => element1 % 3 === 0 && element1 % 5 === 0);
        return value1;
    };
    console.log(findMultiplesElements1([5, 9, 13, 24, 54, 10, 13, 99, 1, 5])); //FALSE
}
/*
#### Task 7 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`every`** –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ, –≤ –º–∞—Å—Å–∏–≤–µ —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ç–Ω–∞—è.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. 
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false
*/
console.log(`TASK 7:`);
{
    function checkFiguresMultiples(myArray: number[]): boolean {            //function declaration
        const sumOfSquaredDigits = myArray.map(num => {
            const squared = num ** 2;
            return String(squared).split('').reduce((acc, digit) => acc + Number(digit), 0);
        });
        return sumOfSquaredDigits.every(sum => sum % 2 === 0);
    }
    console.log(checkFiguresMultiples([5, 9, 13, 99, 1, 5])); // –í–µ—Ä–Ω–µ—Ç false

    console.log(`------------------------`);

    let checkFiguresMultiples1 = (myArray: number[]): boolean => {          //arrow functiob
        const sumOfSquaredDigits = myArray.map(num => {
            const squared = num ** 2;
            return String(squared).split('').reduce((acc, digit) => acc + Number(digit), 0);
        });
        return sumOfSquaredDigits.every(sum => sum % 2 === 0);
    }
    console.log(checkFiguresMultiples1([13, 99, 13, 99, 13, 99])); // –í–µ—Ä–Ω–µ—Ç true
}
/*
#### Task 8 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–ª–µ–∫—Ü–∏—é **`Map`** —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∫ —Å–∞–ª–∞—Ç—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∞–ª–∞—Ç.
–ù–∞–ø—Ä–∏–º–µ—Ä: –û–≥—É—Ä—Ü—ã - 300, –ø–æ–º–∏–¥–æ—Ä—ã - 200, —Å–æ–ª—å - 10, —Å–º–µ—Ç–∞–Ω–∞ - 110
–í—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 100 –≥—Ä.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`.
*/
console.log(`TASK 8:`);
{
    let listOfProducts = new Map<string, number>(); //–°–æ–∑–¥–∞–Ω–∏–µ Map
    listOfProducts.set('–û–≥—É—Ä—Ü—ã', 300);
    listOfProducts.set('–ü–æ–º–∏–¥–æ—Ä—ã', 200);
    listOfProducts.set('–ö–æ–ª–±–∞—Å–∞', 100);
    listOfProducts.set('–ì–æ—Ä–æ—à–µ–∫', 50);
    listOfProducts.set('–°–æ–ª—å', 25);
    listOfProducts.set('–°–º–µ—Ç–∞–Ω–∞', 110);

    function getProductPriceMoreHundred(productList: Map<string, number>): void { //function declaration
        productList.forEach((value, key, map) => {
            if (value > 100) {
                console.log(key)
            };
        }
        );
    }
    getProductPriceMoreHundred(listOfProducts);
    console.log(`------------------------`);
    let getProductPriceMoreHundred1 = (productList1: Map<string, number>): void => { //arrow function
        productList1.forEach((value1, key1, map) => {
            if (value1 > 100) {
                console.log(key1)
            };
        }
        );
    }
    getProductPriceMoreHundred1(listOfProducts);
}
/*
#### Task 9 üñ•
–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–ª–µ–∫—Ü–∏—é **`Set`** —Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π:
    const numbers = [1, 6, 3, 2, 7, 325, 234, 54, 586, 23, 24, 64, 56, 3, 5, 7, 8, 1, 6, 8, 9, 4, 5, 61, 2, 4, 5, 6, 3, 5]
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`.
*/
console.log(`TASK 9:`);
{
    function getArrWithUniqValue(randArr: number[]): void {                                     //function declaration
        const myFirstSet = [...new Set(randArr)];
        console.log(JSON.stringify(myFirstSet, null, 4));
    }
    getArrWithUniqValue([1, 6, 3, 2, 7, 325, 234, 54, 586, 23, 24, 64, 56, 3, 5, 7, 8, 1, 6, 8, 9, 4, 5, 61, 2, 4, 5, 6, 3, 5]);

    console.log(`------------------------`);

    let getArrWithUniqValue1 = (randArr1: number[]): void => {                                  //arrow function
        const myFirstSet1 = [...new Set(randArr1)];
        console.log(JSON.stringify(myFirstSet1, null, 4));
    }
    getArrWithUniqValue1([1, 6, 3, 2, 7, 325, 234, 54, 586, 23, 24, 64, 56, 3, 5, 7, 8, 1, 6, 8, 9, 4, 5, 61, 2, 4, 5, 6, 3, 5]);
}
/*
#### Task 10 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤. –ó–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem2, —Ç—Ä–µ—Ç–∏–π - –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem3. 
–ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - –∑–∞–ø–∏—à–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem3 –∑–Ω–∞—á–µ–Ω–∏–µ 'eee', –∞ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ - –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem2 –∑–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'bbb'. 
–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∏–∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`.
*/
console.log(`TASK 10:`);
{
    function getSecondAndThirdValue(myArray: string[]): void {                                  //function declaration
        let [, elem = "bbb", elem3 = "eee"] = myArray;
        console.log(`–í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞: ${elem} –∏ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞: ${elem3}`);
    }
    getSecondAndThirdValue(['Belarus', 'Russia', 'Poland', 'Litva', 'Latvia']);

    let getSecondAndThirdValue1 = (myArray1: string[]): void => {                               //arrow function
        let [, elem1 = "bbb", elem31 = "eee"] = myArray1;
        console.log(`–í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞: ${elem1} –∏ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞: ${elem31}`);
    }
    getSecondAndThirdValue1(['Belarus']);
}
/*
#### Task 11 üñ•
–î–∞–Ω –æ–±—ä–µ–∫—Ç {name: '–ü–µ—Ç—Ä', 'surname': '–ü–µ—Ç—Ä–æ–≤', 'age': '20 –ª–µ—Ç', }. 
–ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ name, surname –∏ age. 
–°–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã, –µ—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ - –æ–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {name: '–ê–Ω–æ–Ω–æ–º', 'surname': '–ê–Ω–æ–Ω–∏–º–æ–≤–∏—á', 'age': '? –ª–µ—Ç'}.
> –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è `function declaration` & `arrow function`. 
*/
console.log(`TASK 11:`);
{
    interface IPerson {
        name?: string;
        surname?: string;
        age?: string;
    }
    function getdestructArray(myArray: IPerson): void {                                        //function declaration
        let { name = '–ê–Ω–æ–Ω–∏–º', surname = '–ê–Ω–æ–Ω–∏–º–æ–≤–∏—á', age = '? –ª–µ—Ç' }: IPerson = myArray;
        console.log(name);
        console.log(surname);
        console.log(age);
    }
    getdestructArray({ name: '–ü–µ—Ç—Ä', 'surname': '–ü–µ—Ç—Ä–æ–≤', 'age': '20 –ª–µ—Ç' });
    console.log(`------------------------`);
    function getdestructArray1(myArray1: IPerson): void {                                      //arrow function
        let { name = '–ê–Ω–æ–Ω–∏–º', surname = '–ê–Ω–æ–Ω–∏–º–æ–≤–∏—á', age = '? –ª–µ—Ç' }: IPerson = myArray1;
        console.log(name);
        console.log(surname);
        console.log(age);
    }
    getdestructArray1({ 'surname': '–ü–µ—Ç—Ä–æ–≤' });
}
/*
#### Task 1. ADVANCED level üñ•
+ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç—Ä–æ–ª–ª–µ–π, –Ω–µ–π—Ç—Ä–∞–ª–∏–∑—É—è —É–≥—Ä–æ–∑—É.
+ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –≥–ª–∞—Å–Ω—ã–º–∏.
+ –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ ¬´This website is for losers LOL!¬ª —Å—Ç–∞–Ω–µ—Ç "Ths wbst s fr lsrs LL!".
//–Ω–µ —Ä—É—Å—Å–∫–∞—è '—É', –∞ –ª–∞—Ç–∏–Ω—Å–∫–∞—è –±—É–∫–≤–∞
> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ **`y`** –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–ª–∞—Å–Ω–æ–π. 
*/
console.log(`TASK 1.ADVANCED level:`);
{
    let clineStr = (str: string) => str.replace(/[aeiou]/gi, '');
    console.log(clineStr(`This website is for losers LOL!`));
}
/*
#### Task 2. ADVANCED level üñ•
+ –í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:
    accum("abcd") -> "A-Bb-Ccc-Dddd"
    accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
    accum("cwAt") -> "C-Ww-Aaa-Tttt"
> –ü–∞—Ä–∞–º–µ—Ç—Ä - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –æ—Ç a..z –∏ A..Z.
*/
console.log(`TASK 2.ADVANCED level:`);
{
    let getRepeatedLetters = (myStr: string): string => {
        let letters: string[] = myStr.split('');
        let repLetters: string[] = [];
        for (let i: number = 0; i < letters.length; i++) {
            let firstUpper = letters[i].toUpperCase();
            let lowCase = letters[i].toLowerCase().repeat(i);
            let concat = firstUpper + lowCase;
            repLetters.push(concat);
        };
        return repLetters.join('-');
    };
    console.log(getRepeatedLetters('AbcD'));
}
/*
#### Task 3. ADVANCED level üñ•
–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –∏ —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π
+ –í —ç—Ç–æ–º –Ω–µ–±–æ–ª—å—à–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤–∞–º –¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, –∏ –≤—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ.
    highAndLow("1 2 3 4 5"); // return "5 1"
    highAndLow("1 2 -3 4 5"); // return "5 -3"
    highAndLow("1 9 3 4 -5"); // return "9 -5"
> –°—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º, –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º.
*/
console.log(`TASK 3.ADVANCED level:`);
{
    let highAndLow: string = "1 2 -3 4 5";
    let arrayWithNum: number[] = highAndLow.split(' ').map(Number);
    let maxVal = _.max(arrayWithNum);
    let minVal = _.min(arrayWithNum);
    console.log(`${maxVal} ${minVal}`);
}
/*
#### Task 4. ADVANCED level üñ•
+ –ò–∑–æ–≥—Ä–∞–º–º–∞ - —ç—Ç–æ —Å–ª–æ–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±—É–∫–≤, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö. 
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏–∑–æ–≥—Ä–∞–º–º–æ–π. 
–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–≥—Ä–∞–º–º–æ–π. –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    isIsogram("Dermatoglyphics") == true
    isIsogram("aba") == false
    isIsogram("moOse") == false // -- ignore letter case
*/
console.log(`TASK 3.ADVANCED level:`);
{
    let isItIsigramOrNot = (word: string): boolean => {
        let arrayFromWord = word.toLowerCase().split(``);
        for (let i: number = 0; i < arrayFromWord.length; i++) {
            for (let j = i + 1; j < arrayFromWord.length; j++) {
                if (arrayFromWord[i] === arrayFromWord[j]) {
                    return false;
                }
            }
        }
        return true;
    };
    console.log(isItIsigramOrNot('Dermatoglyphics'));
}

